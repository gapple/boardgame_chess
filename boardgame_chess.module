<?php
/**
 * Implementation of hook_boardgame_gametypes().
 */
function boardgame_chess_boardgame_gametypes() {
  return array(
      'chess' => array(
        'initialize' => 'boardgame_chess_initialize',
        'validate_move' => 'boardgame_chess_validate_move',
        'render' => 'boardgame_chess_render',
      ),
  );
}

/**
 * Return array for helping to convert files to numeric values
 */
function _boardgame_chess_convert() {
  return array(
      'a' => 1, 'b' => 2, 'c' => 3, 'd' => 4,
      'e' => 5, 'f' => 6, 'g' => 7, 'h' => 8,
    );
}

/**
 * Create a default starting board layout
 */
function boardgame_chess_initialize() {
  $white_template = new stdClass();
  $white_template->type = 'pawn';
  $white_template->set = 'white';

  $black_template = clone $white_template;
  $black_template->set = 'black';

  $board = array();

  $board['a2'] = clone $white_template;
  $board['b2'] = clone $white_template;
  $board['c2'] = clone $white_template;
  $board['d2'] = clone $white_template;
  $board['e2'] = clone $white_template;
  $board['f2'] = clone $white_template;
  $board['g2'] = clone $white_template;
  $board['h2'] = clone $white_template;

  $white_template->type = 'rook';
  $board['a1'] = clone $white_template;
  $board['h1'] = clone $white_template;

  $white_template->type = 'knight';
  $board['b1'] = clone $white_template;
  $board['g1'] = clone $white_template;

  $white_template->type = 'bishop';
  $board['c1'] = clone $white_template;
  $board['f1'] = clone $white_template;

  $white_template->type = 'queen';
  $board['d1'] = clone $white_template;
  $white_template->type = 'king';
  $board['e1'] = clone $white_template;

  $board['a7'] = clone $black_template;
  $board['b7'] = clone $black_template;
  $board['c7'] = clone $black_template;
  $board['d7'] = clone $black_template;
  $board['e7'] = clone $black_template;
  $board['f7'] = clone $black_template;
  $board['g7'] = clone $black_template;
  $board['h7'] = clone $black_template;

  $black_template->type = 'rook';
  $board['a8'] = clone $black_template;
  $board['h8'] = clone $black_template;

  $black_template->type = 'knight';
  $board['b8'] = clone $black_template;
  $board['g8'] = clone $black_template;

  $black_template->type = 'bishop';
  $board['c8'] = clone $black_template;
  $board['f8'] = clone $black_template;

  $black_template->type = 'queen';
  $board['d8'] = clone $black_template;
  $black_template->type = 'king';
  $board['e8'] = clone $black_template;

  return $board;
}

/**
 * Check that a move is valid for a chess game
 */
function boardgame_chess_validate_move($state, $move) {
  $convert = _boardgame_chess_convert();

  // move: 2, capture: 3, castle: 4, pawn promotion: 2
  $action_count = count($move);
  if (!in_array($action_count, array(2, 3, 4))) {
    return FALSE;
  }

  foreach ($move as $action) {
    // check that unit type is valid
    if (!in_array($action->type, array('king', 'queen', 'rook', 'bishop', 'knight', 'pawn'))) {
      return FALSE;
    }
    if (!in_array($action->set, array('black', 'white'))) {
      return FALSE;
    }

    // check that board positions are valid
    preg_match('/^([a-z]+)([\d]+)/i', $action->position, $matches);
    $file = $matches[1];
    $rank = $matches[2];
    if (isset($convert[$file]) && in_array($rank, $convert)) {
      return FALSE;
    }
  }

  // TODO check legality of move

  return TRUE;
}

/**
 * Render HTML output of game state
 */
function boardgame_chess_render($game) {
  drupal_add_css(drupal_get_path('module', 'boardgame_chess') .'/boardgame_chess.css');

  $unicode = array(
    'white' => array(
      'king'   => 9812,
      'queen'  => 9813,
      'rook'   => 9814,
      'bishop' => 9815,
      'knight' => 9816,
      'pawn'   => 9817,
    ),
    'black' => array(
      'king'   => 9818,
      'queen'  => 9819,
      'rook'   => 9820,
      'bishop' => 9821,
      'knight' => 9822,
      'pawn'   => 9823,
    ),
  );

  $convert = _boardgame_chess_convert();
  $convert_flip = array_flip($convert);

  // Load the board data into a table
  $board = array();
  for ($rank = 8; $rank > 0; --$rank) { // highest rank is at top of board.
    $board[$rank] = array();
    for ($file_num = 1; $file_num <= 8; ++$file_num) {
      $board[$rank][$convert_flip[$file_num]] = '';
    }
  }

  foreach ($game->state as $key => $tile) {
    if (!empty($tile)) {
      preg_match('/^([a-z]+)([\d]+)/i', $key, $matches);
      $file = $matches[1];
      $rank = $matches[2];

      if (isset($unicode[$tile->set][$tile->type])) {
        $board[$rank][$file] = '&#' . $unicode[$tile->set][$tile->type] . ';';
      }
      else {
        $board[$rank][$file] = '?';
      }
    }
  }

  $content = theme_table(array_keys($board[1]), $board, array('class' => 'boardgame boardgame-' . check_plain($game->type)));

  return $content;
}
